<?php
#####################################################################################################
#
#					Module pour la plateforme de paiement PayZen
#						Version : 1.0 (révision 33926)
#									########################
#					Développé pour Ubercart
#						Version : 3.0
#						Compatibilité plateforme : V2
#									########################
#					Développé par Lyra Network
#						http://www.lyra-network.com/
#						05/03/2012
#						Contact : support@payzen.eu
#
#####################################################################################################

// Load VADS API
if (!class_exists('VadsApi')) {
	include_once('uc_vads.inc');
}

/* ************ *
* DRUPAL HOOKS *
* ************ */

/**
 * hook menu (list of access points to the module)
 */
function uc_vads_menu() {
	$items = array();

	$items['cart/vads_check'] = array(
		'page callback' => 'uc_vads_payment_check',
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK
    );

    $items['cart/vads_success'] = array(
		'page callback' => 'uc_vads_payment_success',
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK
    );

    $items['cart/vads_failure'] = array( 
		'page callback' => 'uc_vads_payment_failure',
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK
    );
    
	return $items;
}

/**
* Display help and module information
* 
* @param path which path of the site we're displaying help
* @param arg array that holds the current path as would be returned from arg() function
* @return help text for the path
*/
function uc_vads_help($path, $arg) {
	$output = '';  //declare your output variable
  	switch ($path) {
    	case "admin/help#uc_vads":
      		$output = '<p>'.  uc_vads_t("Integrates PayZen Payment gateway with Ubercart") .'</p>';
      	break;
  	}
  	
  	return $output;
}


/* ************** *
 * UBERCART HOOKS *
 * ************** */

/**
 * Implementation of hook_uc_payment_method().
 * Declare the payment method and its standard Ubercart parameters
 */
function uc_vads_uc_payment_method() {
	$path = base_path() . drupal_get_path('module', 'uc_vads');
	$title = uc_vads_t('Pay by credit card with PayZen');
	$title .= '<br /><img src="' . $path . '/PayZen.jpg" style="position: relative; left: 2.5em;" />';
	
	$methods['uc_vads'] = array(
		'name' => uc_vads_t('PayZen'),
		'title' => $title,
		'desc' => uc_vads_t('Process credit card payments using PayZen gateway.'),
		'callback' => 'uc_vads_callback',
		'redirect' => 'uc_vads_form',
		'weight' => 1,
		'checkout' => TRUE,
		'no_gateway' => TRUE
	);
	return $methods;
}

// with its callback function
function uc_vads_callback($op, &$order, $form = NULL, &$form_state = NULL) {
	switch ($op) {
		case 'settings':
			return uc_vads_settings_form($form);
		break;
	}
}

/**
 * Payment administration settings form
 */
function uc_vads_settings_form($form = NULL) {	
	// Module info
	$form['uc_vads']['uc_vads_info'] = array(
		'#type' => 'fieldset',
		'#title' => uc_vads_t('Module information')
	);
	
	$form['uc_vads']['uc_vads_info']['uc_vads_developed_by'] = array(
		'#type' => 'item',
		'#title' => uc_vads_t('Developed by'),
		'#markup' => '<a target="_blank" href="http://www.lyra-network.com">Lyra Network</a>'
	);
	$form['uc_vads']['uc_vads_info']['uc_vads_contact'] = array(
		'#type' => 'item',
		'#title' => uc_vads_t('Contact email'),
		'#markup' => '<a href="mailto:support@payzen.eu">support@payzen.eu</a>'
	);
	$form['uc_vads']['uc_vads_info']['uc_vads_contrib'] = array(
		'#type' => 'item',
		'#title' => uc_vads_t('Module version'),
		'#markup' => '1.0'
	);
	$form['uc_vads']['uc_vads_info']['uc_vads_gateway'] = array(
		'#type' => 'item',
		'#title' => uc_vads_t('Gateway version'),
		'#markup' => 'V2'
	);
	$form['uc_vads']['uc_vads_info']['uc_vads_cms'] = array(
		'#type' => 'item',
		'#title' => uc_vads_t('Tested with'),
		'#markup' => 'Ubercart 3.0'
	);
	
	// Gateway access settings
	$form['uc_vads']['uc_vads_gateway_access'] = array(
		'#type' => 'fieldset',
		'#title' => uc_vads_t('Gateway access')
	);
	
	$form['uc_vads']['uc_vads_gateway_access']['uc_vads_site_id'] = array(
		'#type' => 'textfield',
		'#title' => uc_vads_t('Site id'),
		'#description' => uc_vads_t('Your PayZen site identifier'),
		'#default_value' => variable_get('uc_vads_site_id', '12345678')
	);
	$form['uc_vads']['uc_vads_gateway_access']['uc_vads_key_test'] = array(
		'#type' => 'textfield',
		'#title' => uc_vads_t('Test mode certificate'),
		'#description' => uc_vads_t('Available in your PayZen back-office'),
		'#default_value' => variable_get('uc_vads_key_test', '1111111111111111')
	);
	$form['uc_vads']['uc_vads_gateway_access']['uc_vads_key_prod'] = array(
		'#type' => 'textfield',
		'#title' => uc_vads_t('Production mode certificate'),
		'#description' => uc_vads_t('Available in your PayZen back-office after validation'),
		'#default_value' => variable_get('uc_vads_key_prod', '2222222222222222')
	);
	$form['uc_vads']['uc_vads_gateway_access']['uc_vads_ctx_mode'] = array(
		'#type' => 'select',
		'#title' => uc_vads_t('Mode'),
		'#description' => uc_vads_t('TEST or PRODUCTION'),
		'#options' => array(
			'TEST' => uc_vads_t('Test'),
			'PRODUCTION' => uc_vads_t('Production')
		),
		'#default_value' => variable_get('uc_vads_ctx_mode', 'TEST')
	);
	$form['uc_vads']['uc_vads_gateway_access']['uc_vads_platform_url'] = array(
		'#type' => 'textfield',
		'#title' => uc_vads_t('Payment gateway URL'),
		'#description' => uc_vads_t('Link to the payment platform'),
		'#default_value' => variable_get('uc_vads_platform_url', 'https://secure.payzen.eu/vads-payment/')
	);
	
	// Payment page settings
	$form['uc_vads']['uc_vads_payment_page'] = array(
		'#type' => 'fieldset',
		'#title' => uc_vads_t('Payment page')
	);
	$form['uc_vads']['uc_vads_payment_page']['uc_vads_language'] = array(
		'#type' => 'select',
		'#title' => uc_vads_t('Language'),
		'#description' => uc_vads_t('Default language of the payment gateway'),
		'#options' => array(
			'fr' => uc_vads_t('French'),
			'en' => uc_vads_t('English'),
			'es' => uc_vads_t('Spanish'),
			'de' => uc_vads_t('German'),
			'it' => uc_vads_t('Italian'),
			'zh' => uc_vads_t('Chinese'),
			'ja' => uc_vads_t('Japanese'),
			'pt' => uc_vads_t('Portuguese'),
			'nl' => uc_vads_t('Dutch')
		),
		'#default_value' => variable_get('uc_vads_language', 'fr')
	);
	$form['uc_vads']['uc_vads_payment_page']['uc_vads_available_languages'] = array(
		'#type' => 'select',
	    '#multiple' => TRUE,
		'#title' => uc_vads_t('Available languages'),
		'#description' => uc_vads_t('Select ALL to use gateway config'),
		'#options' => array(
		    '' => uc_vads_t('ALL'),
			'fr' => uc_vads_t('French'),
			'en' => uc_vads_t('English'),
			'es' => uc_vads_t('Spanish'),
			'de' => uc_vads_t('German'),
			'it' => uc_vads_t('Italian'),
			'zh' => uc_vads_t('Chinese'),
			'ja' => uc_vads_t('Japanese'),
			'pt' => uc_vads_t('Portuguese'),
			'nl' => uc_vads_t('Dutch')
		),
		'#default_value' => variable_get('uc_vads_available_languages', '')
	);
	$form['uc_vads']['uc_vads_payment_page']['uc_vads_capture_delay'] = array(
		'#type' => 'textfield',
		'#title' => uc_vads_t('Capture delay'),
		'#description' => uc_vads_t('Leave blank to use back-office parameter'),
		'#default_value' => variable_get('uc_vads_capture_delay', '')
	);
	$form['uc_vads']['uc_vads_payment_page']['uc_vads_validation_mode'] = array(
		'#type' => 'select',
		'#title' => uc_vads_t('Validation mode'),
		'#description' => uc_vads_t('If manual is selected, you will have to confirm payments manually in your PayZen back-office'),
		'#options' => array(
			'' => uc_vads_t('Back-office default'),
			'0' => uc_vads_t('Automatic'),
			'1' => uc_vads_t('Manual')
		),
		'#default_value' => variable_get('uc_vads_validation_mode', '')
	);
	$form['uc_vads']['uc_vads_payment_page']['uc_vads_payment_cards'] = array(
		'#type' => 'textfield',
		'#title' => uc_vads_t('Payment cards'),
		'#description' => uc_vads_t('Leave blank to accept all cards, or use values separated by ";" (e.g. "CB;VISA;MASTERCARD")'),
		'#default_value' => variable_get('uc_vads_payment_cards', '')
	);
	
	// Amount restrictions settings
	$form['uc_vads']['uc_vads_amount_restrictions'] = array(
		'#type' => 'fieldset',
		'#title' => uc_vads_t('Amount restrictions')
	);
	
	$form['uc_vads']['uc_vads_amount_restrictions']['uc_vads_amount_max'] = array(
		'#type' => 'textfield',
		'#title' => uc_vads_t('Maximum Order Total'),
		'#description' => uc_vads_t('Maximum amount for which this payment method is available'),
		'#default_value' => variable_get('uc_vads_amount_max', '')
	);
	$form['uc_vads']['uc_vads_amount_restrictions']['uc_vads_amount_min'] = array(
		'#type' => 'textfield',
		'#title' => uc_vads_t('Minimum Order Total'),
		'#description' => uc_vads_t('Minimum amount for which this payment method is available'),
		'#default_value' => variable_get('uc_vads_amount_min', '')
	);
	
	
	// Return to shop settings
	$form['uc_vads']['uc_vads_return_settings'] = array(
		'#type' => 'fieldset',
		'#title' => uc_vads_t('Return options')
	);
	
	$form['uc_vads']['uc_vads_return_settings']['uc_vads_redirect_enabled'] = array(
		'#type' => 'select',
		'#title' => uc_vads_t('Automatic redirection'),
		'#description' => uc_vads_t('Send the client back to the shop at the end of the payment process'),
		'#options' => array(
			'False' => uc_vads_t('Disabled'),
			'True' => uc_vads_t('Enabled')
		),
		'#default_value' => variable_get('uc_vads_redirect_enabled', 'False')
	);
	$form['uc_vads']['uc_vads_return_settings']['uc_vads_redirect_success_timeout'] = array(
		'#type' => 'textfield',
		'#title' => uc_vads_t('Success redirection timeout'),
		'#description' => uc_vads_t('Delay before redirection after a successful payment'),
		'#default_value' => variable_get('uc_vads_redirect_success_timeout', 5)
	);
	$form['uc_vads']['uc_vads_return_settings']['uc_vads_redirect_success_message'] = array(
		'#type' => 'textfield',
		'#title' => uc_vads_t('Success redirection message'),
		'#description' => uc_vads_t('Displayed message after a successful payment'),
		'#default_value' => variable_get('uc_vads_redirect_success_message', 'Redirection vers la boutique dans quelques instants')
	);
	$form['uc_vads']['uc_vads_return_settings']['uc_vads_redirect_error_timeout'] = array(
		'#type' => 'textfield',
		'#title' => uc_vads_t('Error redirection timeout'),
		'#description' => uc_vads_t('Delay before redirection after a failed payment'),
		'#default_value' => variable_get('uc_vads_redirect_error_timeout', 5)
	);
	$form['uc_vads']['uc_vads_return_settings']['uc_vads_redirect_error_message'] = array(
		'#type' => 'textfield',
		'#title' => uc_vads_t('Error redirection message'),
		'#description' => uc_vads_t('Displayed message after a failed payment'),
		'#default_value' => variable_get('uc_vads_redirect_error_message', 'Redirection vers la boutique dans quelques instants')
	);
	$form['uc_vads']['uc_vads_return_settings']['uc_vads_return_mode'] = array(
		'#type' => 'select',
		'#title' => uc_vads_t('Return mode'),
		'#description' => uc_vads_t('Method to use when transfering the result of the payment through the client browser'),
		'#options' => array(
			'GET' => uc_vads_t('GET (parameters in url)'),
			'POST' => uc_vads_t('POST (may cause warnings on client browser)')
		),
		'#default_value' => variable_get('uc_vads_return_mode', 'GET')
	);
	$form['uc_vads']['uc_vads_return_settings']['uc_vads_url_success'] = array(
		'#type' => 'textfield',
		'#title' => uc_vads_t('Success url'),
		'#description' => uc_vads_t('Url the client will be redirected to after a successful payment'),
		'#default_value' => variable_get('uc_vads_url_success', url('cart/vads_success',array('absolute'=>TRUE)))
	);
	$form['uc_vads']['uc_vads_return_settings']['uc_vads_url_return'] = array(
		'#type' => 'textfield',
		'#title' => uc_vads_t('Return url'),
		'#description' => uc_vads_t('Url the client will be redirected to by default'),
		'#default_value' => variable_get('uc_vads_url_return', url('cart/vads_failure',array('absolute'=>TRUE)))
	);
	$form['uc_vads']['uc_vads_return_settings']['uc_vads_url_check'] = array(
		'#type' => 'item',
		'#title' => uc_vads_t('Silent url to set in the PayZen back-office'),
		'#description' => url('cart/vads_check',array('absolute'=>TRUE))
	);
	
	return $form;
}

/**
 * Display gateway redirect form
 * @param $form
 * @param $form_state
 * @param $order
 * @return unknown_type
 */
function uc_vads_form($form, &$form_state, $order) {
	global $language;
	
	// Process amount restrictions verification
	$amountMin = variable_get('uc_vads_amount_min');
	$amountMax = variable_get('uc_vads_amount_max');
	if (($amountMax && $order->order_total > $amountMax) ||
	   ($amountMin && $order->order_total < $amountMin)) {
			
		drupal_set_message(uc_vads_t('This payment method is not available for your order amount'), 'warning');
		return ;
	}
	
	$vads_api = new VadsApi();
	
	// Gateway data
	$vads_api->set('platform_url',		variable_get('uc_vads_platform_url', 'https://secure.payzen.eu/vads-payment/'));
	$vads_api->set('site_id',			variable_get('uc_vads_site_id'));
	$vads_api->set('key_test',			variable_get('uc_vads_key_test'));
	$vads_api->set('key_prod',			variable_get('uc_vads_key_prod'));
	$vads_api->set('ctx_mode',			variable_get('uc_vads_ctx_mode'));
	
	// Payment data
	$amount = round($order->order_total * 100);
	
	$vads_api->set('amount', 			$amount );
	$vads_api->set('contrib',			'Ubercart3.0_1.0');
	
	$vads_api->set('capture_delay', 	variable_get('uc_vads_capture_delay'));
	$vads_api->set('payment_cards',		variable_get('uc_vads_payment_cards'));
	$vads_api->set('validation_mode',	variable_get('uc_vads_validation_mode'));
	
	// Load currency
	$currency = $vads_api->findCurrencyByAlphaCode($order->currency);
  	if($currency != null) {
 		$vads_api->set('currency', 			$currency->num);
	} else {
		drupal_set_message(uc_vads_t('Unsupported currency'), 'warning');
		return ;
	}
	
	// Load available languages param
	$available_languages = variable_get('uc_vads_available_languages');
	$available_languages = in_array('', $available_languages) ? '' : implode(';', $available_languages);
	$vads_api->set('available_languages', $available_languages);
	
	// Load default language
	$available_langs = $vads_api->getSupportedLanguages();
	$lang = strtolower($language->language);
	if(!in_array($lang, $available_langs)) {
		$lang = variable_get('uc_vads_language', 'fr');
	}
	$vads_api->set('language',			$lang);
	
	// User/order specific data
	$vads_api->set('order_id',			$order->order_id);
	$vads_api->set('cust_id',			$order->uid);
	$vads_api->set('cust_email',		$order->primary_email);
	
	$vads_api->set('cust_phone',		$order->billing_phone);
	$vads_api->set('cust_first_name',	$order->billing_first_name);
	$vads_api->set('cust_last_name',	$order->billing_last_name);
	$vads_api->set('cust_address',		$order->billing_street1.' '.$order->billing_street2);
	$vads_api->set('cust_city',			$order->billing_city);
	$vads_api->set('cust_zip',			$order->billing_postal_code);
	
	// Load customer billing zone
	$vads_api->set('cust_state',		uc_zone_get_by_id($order->billing_zone));
	
	// Load customer billing country
	$data = uc_get_country_data(array('country_id' => $order->billing_country));
	if($data) {
		$country = $data[0]['country_iso_code_2'];
	}
	$vads_api->set('cust_country',		$country ? $country : '');
	
	// Shipping parameters
	$vads_api->set('ship_to_phone',			$order->delivery_phone);
	$vads_api->set('ship_to_first_name',	$order->delivery_first_name);
	$vads_api->set('ship_to_last_name',		$order->delivery_last_name);	
	$vads_api->set('ship_to_street',		$order->delivery_street1);
	$vads_api->set('ship_to_street2',		$order->delivery_street2);
	$vads_api->set('ship_to_city',			$order->delivery_city);
	$vads_api->set('ship_to_zip',			$order->delivery_postal_code);
	
	// Load customer shipping zone
	$vads_api->set('ship_to_state',		uc_zone_get_by_id($order->delivery_zone));
	
	// Load customer shipping country
	$data = uc_get_country_data(array('country_id' => $order->delivery_country));
	if($data) {
		$country = $data[0]['country_iso_code_2'];
	}
	$vads_api->set('ship_to_country',		$country ? $country : '');
	
	// Return options
	$vads_api->set('url_success',		variable_get('uc_vads_url_success', url('cart/vads_success',array('absolute'=>TRUE))));
	$vads_api->set('url_return',		variable_get('uc_vads_url_return', url('cart/vads_failure',array('absolute'=>TRUE))));
	$vads_api->set('redirect_enabled',	variable_get('uc_vads_redirect_enabled'));
	$vads_api->set('redirect_success_timeout',		variable_get('uc_vads_redirect_success_timeout'));
	$vads_api->set('redirect_success_message',		variable_get('uc_vads_redirect_success_message'));
	$vads_api->set('redirect_error_timeout',		variable_get('uc_vads_redirect_error_timeout'));
	$vads_api->set('redirect_error_message',		variable_get('uc_vads_redirect_error_message'));
	$vads_api->set('return_mode',		variable_get('uc_vads_return_mode'));
	
	// Create PayZen payment form
	$fields = $vads_api->getRequestFields();
	foreach ($fields as $field) {
		if ($field->isFilled()) {
			$form[$field->getName()] = array('#type' => 'hidden', '#value' => $field->getValue());
		}
	}
	
	// Add form action buttons
	$form['#action'] = $vads_api->platformUrl;
	
	$form['actions'] = array('#type' => 'actions');
  	$form['actions']['submit'] = array(
    	'#type' => 'submit',
    	'#value' => uc_vads_t('Submit Order'),
  	);
  	
 	return $form;
}


/**
 * Treat payment confirmation requests
 */
function uc_vads_payment_check() {
	if((array_key_exists('vads_payment_config', $_REQUEST) && stripos($_REQUEST['vads_payment_config'], 'MULTI') !== false) || stripos($_REQUEST['vads_contrib'], 'multi') !== false) {
		// multi-payment, load appropriate module
		watchdog('uc_vads',
				 'Order %orderID done with multi payment. Redirect to appropriate module.',
				 array('%orderID' => $_REQUEST['vads_order_id']),
				 WATCHDOG_NOTICE
		);
		
		unset($_REQUEST['q']);
		$query_string = '';
		foreach($_REQUEST as $k=>$v) {
			$query_string .= '&' . $k.'='.urlencode($v);
		}

		drupal_goto(url('cart/vadsmulti_check', array('absolute'=>TRUE)) . $query_string);
		die();
	}
	
	// Set basic vars
	$vads_api = new VadsApi();
	$vads_resp = $vads_api->getResponse(
		$_REQUEST,
		variable_get('uc_vads_ctx_mode'),
		variable_get('uc_vads_key_test'),
		variable_get('uc_vads_key_prod')
	);
	
	$from_server = isset($_REQUEST['vads_hash']);	
	
	// Check authenticity
	if(! $vads_resp->isAuthentified()) {
		watchdog(
			'uc_vads',
			'Suspect request sent to uc_vads_payment_check, IP : %ip',
			array('%ip' => $_SERVER['REMOTE_ADDR']),
			WATCHDOG_ERROR
		);
		
		// Suspect request
		if($from_server) {
			die($vads_resp->getOutputForGateway('auth_fail'));
		} else {
			drupal_set_message(uc_vads_t('Authentication failed'), 'error');
			drupal_goto('cart/checkout');
			return;
		}
	}
	
	/*
	 * Authentified response
	 */
	
	// Retrieve the order
	$order_id = $vads_resp->get('order_id');
	$order = uc_order_load($order_id);
	if ($order == FALSE) {
		watchdog(
			'uc_vads',
			'Payment check attempted on non existing order : %orderID',
			array('%orderID' => $order_id),
			WATCHDOG_ERROR
		);
		
		if($from_server) {
			die($vads_resp->getOutputForGateway('order_not_found'));
		} else {
			drupal_set_message(uc_vads_t('Order not found'), 'warning');
			return;
		}
	}
	
	// Treat response
	$not_paid_statuses = array('canceled', 'in_checkout');
	if(in_array($order->order_status, $not_paid_statuses, true)) {
		// Unpaid order
		$trans_id = $vads_resp->get('trans_id');
		$card_number = $vads_resp->get('card_number');
		$card_brand = $vads_resp->get('card_brand') ;
		
		$comment = uc_vads_t('PayZen Transaction ID: @trans_id, Payment Mean : @card_brand, Card Number : @card_number',
				array(
					'@trans_id' => $trans_id,
					'@card_brand' => $card_brand,
					'@card_number' => $card_number
				)
		);
		
		if($vads_resp->isAcceptedPayment()) {
			$amount = $vads_resp->get('amount') / 100;	// convert back from cents
			
			// Update order status
			uc_order_update_status($order_id, uc_order_state_default('payment_received'));
			
			// Register payment
			uc_payment_enter($order_id, 'uc_vads', $amount, $order->uid, NULL, $comment);
			
			uc_order_comment_save(
				$order_id,
				$order->uid,
				uc_vads_t('Payment of @amount submitted through PayZen.',
					array(
						'@amount' => uc_currency_format($amount)
					)
				),
				'order',
				'payment_received'
			);
			
			if($from_server){
				// Display a little thanks to the gateway
				die($vads_resp->getOutputForGateway('payment_ok'));
			} else {
				if($vads_resp->get('ctx_mode') === 'TEST') {
					$message = uc_vads_t("Payment confirmation was not received from gateway. Have you properly configured the check url in your PayZen back-office ?");
					drupal_set_message($message, 'warning');
				}
				
				$_SESSION['cart_order'] = $order_id;
				$_SESSION['uc_checkout'][$_SESSION['cart_order']]['do_complete'] = TRUE;
				drupal_goto('cart/checkout/complete');
			}			
		} else {
			// Payment was not successful, order remains in its current state
			uc_order_comment_save($order_id, $order->uid, $comment, 'admin');
			watchdog(
				'uc_vads',
				"PayZen returned an error for the payment of order %orderid",
				array('orderid'=>$order_id),
				WATCHDOG_NOTICE
			);
			
  			if($from_server){
  				die($vads_resp->getOutputForGateway('payment_ko'));
  			} else {
				drupal_set_message(
					uc_vads_t('The payment process was not completed. Your order has not been registered.'),
					'warning'
				);
				
				// Return to checkout
  				drupal_goto('cart/checkout');
  			}
		}
	} else {
		if($vads_resp->isAcceptedPayment()) {
			// Successful payment, already registered
			if($from_server){
				die ($vads_resp->getOutputForGateway('payment_ok_already_done'));
			} else {
			    $_SESSION['cart_order'] = $order_id;
			    $_SESSION['uc_checkout'][$_SESSION['cart_order']]['do_complete'] = TRUE;
				drupal_goto('cart/checkout/complete');
			}
		} else {
			// Payment has been registered as successful, but we receive a payment error message !
			watchdog(
				'uc_vads',
				'Invalid payment confirmation received for an already accepted order',
				array(),
				WATCHDOG_ERROR
			);
			
			if($from_server){
				die ($vads_resp->getOutputForGateway('payment_ko_on_order_ok'));
			} else {
				$message  = uc_vads_t("An error has occurred.");
				
				if($vads_resp->get('ctx_mode') === 'TEST') {
					$message .= ' ';
					$message .= uc_vads_t("Invalid payment confirmation received for an already accepted order.");
				}
				
				drupal_set_message($message, 'error');
				drupal_goto('cart/checkout');
			}
		}
	}
}

/**
 * Manage client's return after a successful payment
 */
function uc_vads_payment_success() {
	if(isset($_REQUEST['vads_order_id'])){
		// Parameters transmitted => there is some checking to do
		uc_vads_payment_check();
	} else {
		// This redirection will empty the cart and display a nice success message
		// but will not validate the payment (this is done by the check url call)
		$_SESSION['do_complete'] = TRUE;
		drupal_goto('cart/checkout/complete');
	}
}

/**
 * Manage client's return after some problem on the payment gateway
 */
function uc_vads_payment_failure() {
	if(isset($_REQUEST['vads_order_id'])){
		// Parameters transmitted => there is some checking to do
		uc_vads_payment_check();
	} else {
		// Same customer pay again ;)
		drupal_goto('cart/checkout');
	}
}

function uc_vads_t($text, array $args = array()) {
	return t($text, $args, array('context' => 'uc_vads'));
}

?>